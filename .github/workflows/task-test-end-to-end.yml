---
# yaml-language-server: $schema=https://raw.githubusercontent.com/SchemaStore/schemastore/refs/heads/master/src/schemas/json/github-workflow.json
name: Task - Test Madara Connectivity

# This workflow tests Madara endpoint connectivity
on:
  workflow_dispatch:
  workflow_call:

jobs:
  test-madara-connectivity:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Load env
        uses: ./.github/actions/load-env

      - name: Download and extract Pathfinder binary
        run: |
          mkdir -p target/release/
          curl -L -o pathfinder.tar.gz https://github.com/eqlabs/pathfinder/releases/download/v0.18.0/pathfinder-x86_64-unknown-linux-gnu.tar.gz
          tar -xzf pathfinder.tar.gz -C target/release/
          chmod +x target/release/pathfinder
          rm pathfinder.tar.gz

      - name: Run Pathfinder
        run: |
          RUST_LOG=debug ./pathfinder --ethereum.url "https://ethereum-sepolia-rpc.publicnode.com/" \
            --http-rpc "0.0.0.0:9545" \
            --rpc.root-version "v07" \
            --network "custom" \
            --chain-id "MADARA_DEVNET" \
            --gateway-url "http://localhost:8080/feeder" \
            --feeder-gateway-url "http://localhost:8080/feeder_gateway" \
            --storage.state-tries "archive" \
            --gateway.request-timeout "1000"

      - name: Docker login
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Check Docker Installation
        run: |
          if command -v docker &> /dev/null
            then
                echo "Docker is installed. Version information:"
                docker --version
                echo "Checking if Docker daemon is running:"
                if docker info &> /dev/null
                then
                    echo "✅ Docker daemon is running"
                else
                    echo "❌ Docker daemon is not running"
                fi
            else
                echo "Docker is not installed or not in PATH"
            fi

      - name: Pull Docker images
        run: |
          docker pull eqlabs/pathfinder:latest

      - name: Rust setup
        uses: ./.github/actions/setup-rust
        with:
          rust-version: ${{ env.BUILD_RUST_VERSION }}
          cache-key: madara-${{ runner.os }}-rust-1.86

      - name: Cargo build
        run: |
         export GIT_COMMIT_HASH=$GITHUB_SHA
         CARGO_TARGET_DIR=target cargo build --manifest-path madara/Cargo.toml  --bin madara --release

      - name: Run Madara
        run: |
          nohup ./target/release/madara \
            --base-path ./madara-db \
            --rpc-port 9944 \
            --rpc-cors "*" \
            --rpc-external \
            --rpc-admin \
            --sequencer \
            --chain-config-path configs/presets/devnet.yaml \
            --feeder-gateway-enable \
            --gateway-enable \
            --gateway-external \
            --gateway-port 8080 \
            --no-l1-sync \
            --strk-gas-price 0 \
           --strk-blob-gas-price 0 \
           --gas-price 0 \
           --blob-gas-price 0 \
           --chain-config-override block_time=3s &

           # Store the PID for later cleanup
           echo "MADARA_PID=$!" >> $GITHUB_ENV

           # Wait for Madara to start
           echo "Waiting for Madara to start..."
           timeout 60s bash -c 'until curl -s http://localhost:9944/ &>/dev/null; do sleep 3; echo "Retrying Madara Server..."; done'

           if [ $? -eq 0 ]; then
             echo "Madara is running with gateway on: http://localhost:8080/gateway"
             echo "Madara RPC running on: http://localhost:9944"
           else
             echo "Failed to connect to Madara within timeout"
             exit 1
           fi

      - name: Test Docker connectivity to Madara Feeder Gateway
        run: |
          echo "Testing Docker connectivity to Madara Feeder Gateway..."
          docker run --rm \
            --add-host host.docker.internal=host-gateway \
            curlimages/curl:latest \
            curl http://host.docker.internal:8080/feeder_gateway/get_contract_addresses

      - name: Run Pathfinder
        run: |
          nohup docker run --rm \
            --name pathfinder-service-1342 \
            -p "9545:9545" \
            --add-host host.docker.internal=host-gateway \
            -e RUST_LOG=info \
            eqlabs/pathfinder:latest \
            --ethereum.url "https://ethereum-sepolia-rpc.publicnode.com/" \
            --rpc.root-version "v07" \
            --network "custom" \
            --chain-id "MADARA_DEVNET" \
            --gateway-url "http://host.docker.internal:8080/gateway" \
            --feeder-gateway-url "http://host.docker.internal:8080/feeder_gateway" \
            --storage.state-tries "archive" \
            --gateway.request-timeout "1000" &

          # Store the container name for later cleanup
          echo "PATHFINDER_CONTAINER=pathfinder-service-1342" >> $GITHUB_ENV

          # Wait for Pathfinder to start
          echo "Waiting for Pathfinder to start..."
          timeout 60s bash -c 'until curl -s http://localhost:9545/ &>/dev/null; do sleep 3; echo "Retrying Pathfinder Server..."; done'

          if [ $? -eq 0 ]; then
            echo "✅ Pathfinder is running on: http://localhost:9545"
          else
            echo "❌ Failed to connect to Pathfinder within timeout"
            exit 1
          fi

      - name: Validate Pathfinder
        run: |
          echo "Validating Pathfinder..."
          response=$(curl --fail --location 'http://localhost:9545/rpc/v0_7' \
          --header 'accept: application/json' \
          --header 'content-type: application/json' \
          --data '{
              "id": 1,
              "jsonrpc": "2.0",
              "method": "starknet_blockNumber",
              "params": []
          }')

          echo "Response: $response"

          # Check if response contains expected fields
          if echo "$response" | grep -q '"result"'; then
            echo "✅ Pathfinder is responding correctly"
          else
            echo "❌ Pathfinder response is invalid"
            exit 1
          fi

      - name: Cleanup processes
        if: always()
        run: |
          if [ ! -z "$MADARA_PID" ]; then
            echo "Stopping Madara (PID: $MADARA_PID)"
            kill $MADARA_PID || true
          fi

          if [ ! -z "$PATHFINDER_CONTAINER" ]; then
            echo "Stopping Pathfinder container: $PATHFINDER_CONTAINER"
            docker stop $PATHFINDER_CONTAINER || true
          fi

          # Clean up any remaining processes
          pkill -f madara || true
          # Clean up any remaining pathfinder containers
          docker ps -q --filter "name=pathfinder-service" | xargs -r docker stop || true
